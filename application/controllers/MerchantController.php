<?phprequire_once "db_pg_project/Db_Pg_Project.php";require_once "db_pg_sgift/Db_Pg_Sgift.php";require_once "db_pg_user/Db_Pg_User.php";require_once "LogController.php";class MerchantController extends Zend_Controller_Action{	var $url;	var $first;	var $conn;	var $db_project, $db_review, $db_sgift, $db_user;	var $ID = 2;  	public function init()	{		//Init View		$this->url = $this->getRequest()->getBaseURL();		$this->view->baseUrl = $this->url;				//session		$this->mySession = new Zend_Session_Namespace("user_data");		$this->view->mySession = $this->mySession;				/*Get Configuration Value*/		$this->config=Zend_Registry::get('config');		$this->view->config = $this->config;										// Library 		$this->library = (object) array(											"exporter" => new Exporter($this->config->project->planc->sgift)										);				// Configuration for View		if ($this->mySession->role == $this->config->role->id->merchant) {			$title = "Claim &amp; Redeem Merchant ".$this->mySession->provider_name;		} else if ($this->mySession->role == $this->config->role->id->aggregator) {			$title = "Claim &amp; Redeem Merchant Aggregator";		} else {			$title = "Claim &amp; Redeem";		}		$this->view->attr = (Object) array(											"title" => $title										  );												// Check Session		$this->getFrontController()->getParam("bootstrap")->checkAuthentication($this->config->project->id->sgift);				// Create entity of database		$this->db_project = new Db_Pg_Project($this->config->resources->db->postgre);		$this->db_user = new Db_Pg_User($this->config->resources->db->postgre);		$this->db_sgift = new Db_Pg_Sgift($this->config->resources->db->sgift->postgre);				// Set Variable		$this->view->projects = $this->db_project->getVisibleProject();				$this->first = $this->db_user->checkFirst($this->mySession->id);		$this->checkFirst();				$this->initView();	}		public function checkFirst()	{		if($this->first==0){			$this->_redirect("");		}	}		public function checkValid()	{		// Back to login if session is invalid		$num = array_search($this->config->project->id->sgift, $this->mySession->project);		if (!isset($this->mySession->id)) {			$this->_redirect("");		} 		else if ($this->mySession->role == $this->config->role->id->cs) {			$this->_redirect("");		} 		else if (!is_numeric($num)) {			$this->_redirect("");		}	}	public function indexAction(){		$this->_helper->viewRenderer->setNoRender();		$this->_redirect("merchant/redeem");	}	public function redeemAction(){		$param = (object) $this->getRequest()->getQuery();		$data = array();		$limit = $this->config->sgift->merchant->max->set; // how many data will be shown 		if($param->q!=''){			$q = $param->q;		}		if($param->type!=""){			$data["claim_type"] = $param->type;		}		if($param->channel!=""){			$data["channel"] = $param->channel;		}		if($param->merchant_name !=''){			$data["merchant"] = $param->merchant_name;		}		if($param->voucher_id!=''){			$data["redeem_code"] = $param->voucher_id;		}			if($param->promo_name !=''){			$data["promo_name"] = $param->promo_name;		}		if($param->promo_id != '') {			$data["promo_id"] = $param->promo_id;		}		if($param->start_claim != '') {			$data['start_claim'] = $param->start_claim;		}		if($param->end_claim != '') {			$data['end_claim'] = $param->end_claim;		}		if($param->start_redeem != '') {			$data['start_redeem'] = $param->start_redeem;		}		if($param->end_redeem != '') {			$data['end_redeem'] = $param->end_redeem;		}		if($param->page == '')			$page=1;		else			$page = intval($param->page);		// # find out query stat point		$start = ($page * $limit) - $limit;		//echo "start: ".$start." page in php: ".$page;				$provider_id = ($this->mySession->role == $this->config->role->id->merchant) ? $this->mySession->provider_id : "";		if($this->mySession->role == $this->config->role->id->superadmin || $this->mySession->role == $this->config->role->id->admin)			$result = $this->db_sgift->getRedeem($q, $data, $start, $limit);		else if ($this->mySession->role == $this->config->role->id->merchant) {			$result = $this->db_sgift->getRedeem($q, $data, $start, $limit, $provider_id);		} else {			$result = $this->db_sgift->getRedeem($q, $data, $start, $limit, $provider_id, $this->mySession->merchants); 		}				$_data =  $this->getFrontController()->getParam("bootstrap")->convertResultToArray($result);		$this->view->arrs = Zend_Json::encode($_data);								$this->view->param = $param;				if($user->roleID==$this->config->role->id->cs){			LogController::insert($this->config->resources->db->postgre,  // Koneksi Database								  $this->config->template->log->view,  // Flag								  $this->config->const->activity->view,  // Flag								  $this->mySession->id,  // UserID								  "cssgift", // Menu								  $data); 		 }	}		public function gettotalredeemAction()	{		// Disable View		$this->_helper->viewRenderer->setNoRender();				// Get Parameter 		$param = (object) $this->getRequest()->getPost();				if($param->q!=''){			$q = $param->q;		}		if($param->type!=""){			$data["claim_type"] = $param->type;		}		if($param->channel!=""){			$data["co.name"] = $param->channel;		}		if($param->merchant_name !=''){			$data["pm.name"] = $param->merchant_name;		}		if($param->voucher_id!=''){			$data["cr.redeem_code"] = $param->voucher_id;		}			if($param->promo_name !=''){			$data["coc.name"] = $param->promo_name;		}				if($param->promo_id != '') {			$data["CONCAT(cr.channel_id,'-',cr.provider_id,'-', cr.offer_id,'-', cr.batch_id,'-', cr.campaign_id)"] = $param->promo_id;		}		if($param->start_claim != '') {			$range['start_claim'] = $param->start_claim;		}		if($param->end_claim != '') {			$range['end_claim'] = $param->end_claim;		}		if($param->start_redeem != '') {			$range['start_redeem'] = $param->start_redeem;		}		if($param->end_redeem != '') {			$range['end_redeem'] = $param->end_redeem;		}				$provider_id = ($this->mySession->role == $this->config->role->id->merchant) ? $this->mySession->provider_id : "";		if($this->mySession->role == $this->config->role->id->superadmin || $this->mySession->role == $this->config->role->id->admin) {			$totalData = $this->db_sgift->getRedeemCount($q, $data, '', null, $range);		} else if ($this->mySession->role == $this->config->role->id->merchant) {			$totalData = $this->db_sgift->getRedeemCount($q, $data, $provider_id, null, $range);		} else {			$totalData =$this->db_sgift->getRedeemCount($q, $data, $provider_id, $this->mySession->merchants, $range);		}		echo $totalData;	}		public function gettotalpromoAction()	{		// Disable View		$this->_helper->viewRenderer->setNoRender();				// Get Parameter 		$param = (object) $this->getRequest()->getPost();				if($param->q!=''){			$q = $param->q;		}		if($param->merchant!=''){			$data["pm.name"] = $param->merchant;		}		if($param->type!=''){			$data["claim_type"] = $param->type;		}		if($param->publish_date!=''){			$data["TO_CHAR(coc.creation_time,'DD Mon YYYY HH:MI')"] = $param->publish_date;		}		if($param->coupon_title!=''){			$data["coc.name"] = $param->coupon_title;		}		if($param->start_start!=''){			$range["start_start"] = $param->start_start;		}		if($param->end_start!=''){			$range["end_start"] = $param->end_start;		}		if($param->start_end!=''){			$range["start_end"] = $param->start_end;		}		if($param->end_end!=''){			$range["end_end"] = $param->end_end;		}		if($param->start_publish!=''){			$range["start_publish"] = $param->start_publish;		}		if($param->end_publish!=''){			$range["end_publish"] = $param->end_publish;		}					$provider_id = ($this->mySession->role == $this->config->role->id->merchant) ? $this->mySession->provider_id : "";		if($this->mySession->role == $this->config->role->id->superadmin || $this->mySession->role == $this->config->role->id->admin) {			$totalData = $this->db_sgift->getAllPromoCount($q, $data, '', null, false, $range);		} else if ($this->mySession->role == $this->config->role->id->merchant) {			$totalData = $this->db_sgift->getAllPromoCount($q, $data, $provider_id, null, false, $range);		} else {			$totalData = $this->db_sgift->getAllPromoCount($q, $data, $provider_id, $this->mySession->merchants, false, $range);		}		echo $totalData;	}		public function promoAction(){		// Configuration for View		if ($this->mySession->role == $this->config->role->id->merchant) {			$this->view->attr->title = "Promo Merchant ".$this->mySession->provider_name;		} else if ($this->mySession->role == $this->config->role->id->aggregator) {			$this->view->attr->title = "Promo Merchant Aggregator";		} else {			$this->view->attr->title = "Promo";		}				$param = (object) $this->getRequest()->getQuery();		$data = array();		$q='';		$limit = $this->config->sgift->merchant->max->set;		$offset = 0;				if($param->q!=''){			$q = $param->q;		}		if($param->merchant!=''){			$data["merchant"] = $param->merchant;		}		if($param->type!=''){			$data["claim_type"] = $param->type;		}		if($param->publish_date!=''){//masih salah			$data["publish_date"] = $param->publish_date;		}		if($param->coupon_title!=''){			$data["coupon_title"] = $param->coupon_title;		}		if($param->start_start!=''){			$data["start_start"] = $param->start_start;		}		if($param->end_start!=''){			$data["end_start"] = $param->end_start;		}		if($param->start_end!=''){			$data["start_end"] = $param->start_end;		}		if($param->end_end!=''){			$data["end_end"] = $param->end_end;		}		if($param->start_publish!=''){			$data["start_publish"] = $param->start_publish;		}		if($param->end_publish!=''){			$data["end_publish"] = $param->end_publish;		}				if ($param->offset!='')$offset = (int)$param->offset;				$provider_id = ($this->mySession->role == $this->config->role->id->merchant) ? $this->mySession->provider_id : "";		if($this->mySession->role == $this->config->role->id->superadmin || $this->mySession->role == $this->config->role->id->admin)			$result = $this->db_sgift->getAllPromoFragment($limit, $offset, $q, $data);		else if ($this->mySession->role == $this->config->role->id->merchant) {			$result = $this->db_sgift->getAllPromoFragment($limit, $offset, $q, $data, $provider_id);		} else {			$result = $this->db_sgift->getAllPromoFragment($limit, $offset, $q, $data, $provider_id, $this->mySession->merchants );		}					$arr = $this->getFrontController()->getParam("bootstrap")->convertResultToArray($result);		$this->view->merchant_promo = json_encode($arr, JSON_NUMERIC_CHECK);		$this->view->param = $param;	}		public function searchpromodetailAction(){		$this->_helper->viewRenderer->setNoRender();		//Get query		$param = (object) $this->getRequest()->getPost();		$result = $this->db_sgift->getPromoDetail($param->promo_id, $param->batch_id, $param->campaign_id, $param->provider_id, $param->channel_id);		$arr = $this->getFrontController()->getParam("bootstrap")->convertResultToArray($result); 		echo Zend_Json::encode($arr);	}			public function exportcsvpromoAction()	{			$this->_helper->viewRenderer->setNoRender();				$param = (object) $this->getRequest()->getPost();		$data = array();		$q='';		$limit = "all";				if($param->q!=''){			$q = $param->q;		}		if($param->merchant!=''){			$data["merchant"] = $param->merchant;		}		if($param->type!=''){			$data["claim_type"] = $param->type;		}		if($param->publish_date!=''){//masih salah			$data["publish_date"] = $param->publish_date;		}		if($param->coupon_title!=''){			$data["coupon_title"] = $param->coupon_title;		}		if($param->start_start!=''){			$data["start_start"] = $param->start_start;		}		if($param->end_start!=''){			$data["end_start"] = $param->end_start;		}		if($param->start_end!=''){			$data["start_end"] = $param->start_end;		}		if($param->end_end!=''){			$data["end_end"] = $param->end_end;		}		if($param->start_publish!=''){			$data["start_publish"] = $param->start_publish;		}		if($param->end_publish!=''){			$data["end_publish"] = $param->end_publish;		}				$path = "";		 		if ($param->export == 0) {			$path = "uploads/promo_all".$this->config->csv->ext;						$provider_id = ($this->mySession->role == $this->config->role->id->merchant) ? $this->mySession->provider_id : "";			if($this->mySession->role == $this->config->role->id->superadmin || $this->mySession->role == $this->config->role->id->admin)				$result = $this->db_sgift->getAllPromoFragment($limit, $offset, $q, $data);			else if ($this->mySession->role == $this->config->role->id->merchant) {				$result = $this->db_sgift->getAllPromoFragment($limit, $offset, $q, $data, $provider_id);			} else {				$result = $this->db_sgift->getAllPromoFragment($limit, $offset, $q, $data, $provider_id, $this->mySession->merchants );			}						$this->library->exporter->exportToCSVFromDB($result, $path);		}		else { 			$path = "uploads/promo_current".$this->config->csv->ext;			$json = $param->json;			$this->library->exporter->exportToCSVFromJSON($json, $path);		}			echo $path;	}		public function loadmorepromoAction(){			$this->_helper->viewRenderer->setNoRender();				$param = (object) $this->getRequest()->getPost();		$data = array();		$q='';		$limit = $this->config->sgift->merchant->max->set;		$offset = 0;				if($param->q!=''){			$q = $param->q;		}		if($param->merchant!=''){			$data["pm.name"] = $param->merchant;		}		if($param->type!=''){			$data["claim_type"] = $param->type;		}		if($param->publish_date!=''){			$data["TO_CHAR(coc.creation_time,'DD Mon YYYY HH24:MI')"] = $param->publish_date;		}		if($param->coupon_title!=''){			$data["coc.name"] = $param->coupon_title;		}		if($param->start_start!=''){			$data["start_start"] = $param->start_start;		}		if($param->end_start!=''){			$data["end_start"] = $param->end_start;		}		if($param->start_end!=''){			$data["start_end"] = $param->start_end;		}		if($param->end_end!=''){			$data["end_end"] = $param->end_end;		}		if($param->start_publish!=''){			$data["start_publish"] = $param->start_publish;		}		if($param->end_publish!=''){			$data["end_publish"] = $param->end_publish;		}				if ($param->offset!='')$offset = (int)$param->offset;				$provider_id = ($this->mySession->role == $this->config->role->id->merchant) ? $this->mySession->provider_id : "";		if($this->mySession->role == $this->config->role->id->superadmin || $this->mySession->role == $this->config->role->id->admin)			$result = $this->db_sgift->getAllPromoFragment($limit, $offset, $q, $data);		else if ($this->mySession->role == $this->config->role->id->merchant) {			$result = $this->db_sgift->getAllPromoFragment($limit, $offset, $q, $data, $provider_id);		} else {			$result = $this->db_sgift->getAllPromoFragment($limit, $offset, $q, $data, $provider_id, $this->mySession->merchants );		}		$arr = $this->getFrontController()->getParam("bootstrap")->convertResultToArray($result);		echo json_encode($arr, JSON_NUMERIC_CHECK);	}		public function searchuserAction(){		$this->_helper->viewRenderer->setNoRender();		//Get query		$param = (object) $this->getRequest()->getPost();		$result = $this->db_sgift->getUserSearch($param->user_id);		$arr = $this->getFrontController()->getParam("bootstrap")->convertResultToArray($result);		echo Zend_Json::encode($arr);	}		public function loadmoreAction(){		$this->_helper->viewRenderer->setNoRender();		$param = (object) $this->getRequest()->getPost();		$data = array();		$limit = $this->config->sgift->merchant->max->set; /* how many data will be shown */		if($param->q!=''){			$q = $param->q;		}		if($param->type!=""){			$data["claim_type"] = $param->type;		}		if($param->channel!=""){			$data["channel"] = $param->channel;		}		if($param->merchant_name !=''){			$data["merchant"] = $param->merchant_name;		}		if($param->voucher_id!=''){			$data["redeem_code"] = $param->voucher_id;		}			if($param->promo_name !=''){			$data["promo_name"] = $param->promo_name;		}		if($param->promo_id != ''){			$data["promo_id"] = $param->promo_id;		}		if($param->start_claim != '') {			$data['start_claim'] = $param->start_claim;		}		if($param->end_claim != '') {			$data['end_claim'] = $param->end_claim;		}		if($param->start_redeem != '') {			$data['start_redeem'] = $param->start_redeem;		}		if($param->end_redeem != '') {			$data['end_redeem'] = $param->end_redeem;		}				if($param->page == '')			$page=1;		else			$page = intval($param->page);		// # find out query stat point		$start = ($page * $limit) - $limit;		// echo "start: ".$start." page in php: ".$page;		$provider_id = ($this->mySession->role == $this->config->role->id->merchant) ? $this->mySession->provider_id : "";		if($this->mySession->role == $this->config->role->id->superadmin || $this->mySession->role == $this->config->role->id->admin)			$result = $this->db_sgift->getRedeem($q, $data, $start, $limit);		else if ($this->mySession->role == $this->config->role->id->merchant) {			$result = $this->db_sgift->getRedeem($q, $data, $start, $limit, $provider_id);		} else {			$result = $this->db_sgift->getRedeem($q, $data, $start, $limit, $provider_id, $this->mySession->merchants); 		}				$_data =  $this->getFrontController()->getParam("bootstrap")->convertResultToArray($result);				if($user->roleID==$this->config->role->id->cs){			LogController::insert($this->config->resources->db->postgre,  // Koneksi Database								  $this->config->template->log->view,  // Flag								  $this->config->const->activity->view,  // Flag								  $this->mySession->id,  // UserID								  "cssgift", // Menu								  $data); 		}		echo Zend_Json::encode($_data);		}		public function exportcsvAction()	{			// Disable View		$this->_helper->viewRenderer->setNoRender();		// Get Query 		$param = (object) $this->getRequest()->getPost();		$data = array();		if($param->q!=''){				$q = $param->q;			}		if($param->type!=""){			$data["claim_type"] = $param->type;		}		if($param->channel!=""){			$data["channel"] = $param->channel;		}		if($param->merchant_name !=''){			$data["merchant"] = $param->merchant_name;		}		if($param->voucher_id!=''){			$data["redeem_code"] = $param->voucher_id;		}			if($param->promo_name !=''){			$data["promo_name"] = $param->promo_name;		}		if($param->promo_id != ''){			$data["promo_id"] = $param->promo_id;		}				$path = "";		 		if ($param->export == 0) {			$path = "uploads/galaxy_gift_id_all".$this->config->csv->ext;			$provider_id = ($this->mySession->role == $this->config->role->id->merchant) ? $this->mySession->provider_id : "";			if($this->mySession->role == $this->config->role->id->superadmin || $this->mySession->role == $this->config->role->id->admin)				$result = $this->db_sgift->getRedeem($q, $data, $start, $limit);			else if ($this->mySession->role == $this->config->role->id->merchant) {				$result = $this->db_sgift->getRedeem($q, $data, $start, $limit, $provider_id);			} else {				$result = $this->db_sgift->getRedeem($q, $data, $start, $limit, $provider_id, $this->mySession->merchants); 			}			$this->library->exporter->exportToCSVFromDB($result, $path);		}		else { 			$path = "uploads/galaxy_gift_id_current".$this->config->csv->ext;			$json = $param->json;			$this->library->exporter->exportToCSVFromJSON($json, $path);		}			echo $path;	}		public function exportclaimAction()	{		// Disable View		$this->_helper->viewRenderer->setNoRender();				// Get Query		$param = (object) $this->getRequest()->getPost();				$offset = 0;		$set = $this->config->sgift->claim->export->max->set;		$path = "";		if ($param->type == Db_Pg_Sgift::$CLAIM_OFFLINE) {			$path = "uploads/ggi_offline_claim".$this->config->csv->ext;			$data = array();			do{				$result = $this->db_sgift->getOfflineClaim($offset, $set);				$offset += sizeof($result);				array_push($data, $result);			}while ($offset <= 200);			$json = Zend_Json::encode($data);			$this->library->exporter->exportToCSVFromJSON($json, $path);		} else if ($param->type == Db_Pg_Sgift::$CLAIM_ONLINE) {			$path = "uploads/ggi_online_claim".$this->config->csv->ext;			$data = array();			do{				$result = $this->db_sgift->getOfflineClaim($offset, $set);				$offset += sizeof($result);				array_push($data, $result);			}while ($offset <= 200);			$json = Zend_Json::encode($data);			$this->library->exporter->exportToCSVFromJSON($json, $path);		}		echo $path;	}}